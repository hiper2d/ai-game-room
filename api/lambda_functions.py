import json
import textwrap
import uuid
from typing import List, Tuple

from dotenv import load_dotenv, find_dotenv

from api.ai.assistants import ArbiterAssistantDecorator, PlayerAssistantDecorator
from api.models import Player, Game, MafiaRole
from api.player_generator import generate_players
from api.redis.redis_helper import connect_to_redis, save_game_to_redis, load_game_from_redis


def init_game():
    load_dotenv(find_dotenv())

    game_scene = textwrap.dedent(  # todo: this text has to be generated by AI
        """In the heart of a bustling mid-west saloon, the air filled with the sound of piano tunes and clinking, \
        glasses a diverse group of individuals finds shelter from a howling snowstorm. Each person, a stranger to the \
        next, carries a story colored by the trials of the Wild West. As the fire crackles in the hearth and the storm \
        rages on, unseen tensions and hidden tales weave a tapestry of intrigue and suspense."""
    )
    print("\nGame Scene:")
    print(game_scene)

    all_players: List[Player] = generate_players()
    for current_player in all_players:
        print(current_player)

        players_names_and_stories = ""
        for other_player in all_players:
            if other_player.name != current_player.name:
                players_names_and_stories += f"Name: {other_player.name}\nStory: {other_player.backstory}\n\n"
        players_names_and_stories = players_names_and_stories.strip()

        new_player_assistant = PlayerAssistantDecorator.create_player(
            player=current_player,
            game_story=game_scene,
            players_names_and_stories=players_names_and_stories
        )
        current_player.assistant_id = new_player_assistant.assistant.id
        current_player.thread_id = new_player_assistant.thread.id

    new_arbiter = ArbiterAssistantDecorator.create_arbiter(players=all_players, game_story=game_scene)

    game = Game(
        id=str(uuid.uuid4()),
        story=game_scene,
        players=all_players,
        arbiter_assistant_id=new_arbiter.assistant.id,
        arbiter_thread_id=new_arbiter.thread.id
    )

    r = connect_to_redis()
    save_game_to_redis(r, game)
    return game.id


def talk_to_all(game_id: str, user_message: str):
    load_dotenv(find_dotenv())
    r = connect_to_redis()
    game: Game = load_game_from_redis(r, game_id)

    arbiter = ArbiterAssistantDecorator.load_arbiter_by_assistant_id_and_thread_id(
        assistant_id=game.arbiter_assistant_id, thread_id=game.arbiter_thread_id
    )
    arbiter.ask(user_message)


def delete_assistants_from_openai(game_id: str):
    load_dotenv(find_dotenv())
    r = connect_to_redis()
    game: Game = load_game_from_redis(r, game_id)

    arbiter = ArbiterAssistantDecorator.load_arbiter_by_assistant_id_and_thread_id(
        assistant_id=game.arbiter_assistant_id, thread_id=game.arbiter_thread_id
    )
    arbiter.delete()
    for player in game.players:
        if player.assistant_id:
            player_assistant = PlayerAssistantDecorator.load_player_by_assistant_id_and_thread_id(
                assistant_id=player.assistant_id, thread_id=player.thread_id
            )
            player_assistant.delete()
            player.assistant_id = ''
            player.thread_id = ''
